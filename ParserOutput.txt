class:class:1
id:Utility:1
{:{:2
int:int:3
id:varA:3
type-> int
;:;:3
arraySize*-> #
int:int:4
varDecl-> type id arraySize*;
id:findMax:4
type-> int
(:(:4
varDecl*-> varDecl varDecl*
varDecl*-> varDecl varDecl*
int:int:4
id:array:4
type-> int
[:[:4
integer:3:4
]:]:4
[:[:4
arraySize-> [ integer ]
integer:5:4
]:]:4
):):4
arraySize-> [ integer ]
arraySize*-> #
arraySize*-> arraySize arraySize*
arraySize*-> arraySize arraySize*
fParamsTail*-> #
fParams-> type id arraySize* fParamsTail
{:{:5
funcHead-> type id(fParams)
int:int:6
id:maxValue:6
type-> int
[:[:6
integer:3:6
]:]:6
[:[:6
arraySize-> [ integer ]
integer:5:6
]:]:6
;:;:6
arraySize-> [ integer ]
arraySize*-> #
arraySize*-> arraySize arraySize*
arraySize*-> arraySize arraySize*
int:int:7
varDecl-> type id arraySize*;
id:idx:7
type-> int
;:;:7
arraySize*-> #
float:float:8
varDecl-> type id arraySize*;
id:decimal:8
type-> float
;:;:8
arraySize*-> #
id:maxValue:9
varDecl-> type id arraySize*;
=:=:9
id:array:9
[:[:9
integer:3:9
]:]:9
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
[:[:9
indice-> [arithExpr]
integer:5:9
]:]:9
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
;:;:9
indice-> [arithExpr]
indice*-> #
indice*-> indice indice*
indice*-> indice indice*
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
id:idx:10
statement-> assignStat;
=:=:10
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
integer:17:10
;:;:10
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
if:if:11
statement-> assignStat;
(:(:11
id:idx:11
<=:<=:11
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
integer:5:11
relOp-> == | <= | >= | < | > | <>
):):11
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
then:then:11
{:{:11
id:idx:12
=:=:12
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
id:idx:12
+:+:12
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
integer:1:12
;:;:12
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr*-> +term arithExpr*
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
}:}:13
statement-> assignStat;
statement*-> #
statement*-> statement statement*
else:else:13
statBlock-> {statement*}
{:{:13
}:}:13
statement*-> #
;:;:13
statBlock-> {statement*}
return:return:14
statement-> if(expr)then statBlock else statBlock;
(:(:14
id:idx:14
):):14
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
;:;:14
}:}:15
statement-> return(expr);
statement*-> #
statement*-> statement statement*
statement*-> statement statement*
statement*-> statement statement*
statement*-> statement statement*
;:;:15
funcBody-> {varDecl* statement*}
}:}:16
funcDef-> funcHead funcBody
funcDef*-> #
funcDef*-> funcDef funcDef*
;:;:16
program:program:19
classDecl-> class id {varDecl*funcDef*};
classDecl-> #
classDecl*-> classDecl classDecl*
{:{:19
int:int:20
id:maxValue:20
type-> int
;:;:20
arraySize*-> #
int:int:21
varDecl-> type id arraySize*;
id:minValue:21
type-> int
;:;:21
arraySize*-> #
id:Utility:22
varDecl-> type id arraySize*;
id:utility:22
;:;:22
arraySize*-> #
int:int:23
varDecl-> type id arraySize*;
id:loan:23
type-> int
;:;:23
arraySize*-> #
id:minValue:29
varDecl-> type id arraySize*;
=:=:29
id:randomize:29
(:(:29
id:loan:29
):):29
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
aParamsTail*-> #
aParams-> expr aParamsTail*
;:;:29
factor-> idnest* id(aParams)
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
id:maxValue:30
statement-> assignStat;
=:=:30
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
id:utility:30
.:.:30
indice*-> #
id:findMax:30
idnest-> id indice* .
(:(:30
):):30
aParams-> #
;:;:30
factor-> idnest* id(aParams)
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
get:get:31
statement-> assignStat;
(:(:31
id:loan:31
):):31
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
;:;:31
if:if:32
statement-> get(T3);
(:(:32
id:minValue:32
==:==:32
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
integer:10:32
relOp-> == | <= | >= | < | > | <>
):):32
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
then:then:32
{:{:32
id:minValue:33
=:=:33
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
integer:5:33
;:;:33
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
}:}:34
statement-> assignStat;
statement*-> #
statement*-> statement statement*
else:else:34
statBlock-> {statement*}
{:{:34
id:minValue:35
=:=:35
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
id:minValue:35
+:+:35
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
integer:10:35
;:;:35
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr*-> +term arithExpr*
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
}:}:36
statement-> assignStat;
statement*-> #
statement*-> statement statement*
;:;:36
statBlock-> {statement*}
put:put:37
statement-> if(expr)then statBlock else statBlock;
(:(:37
id:minValue:37
):):37
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
;:;:37
}:}:38
statement-> put(expr);
statement*-> #
statement*-> statement statement*
statement*-> statement statement*
statement*-> statement statement*
statement*-> statement statement*
statement*-> statement statement*
;:;:38
int:int:40
id:randomize:40
type-> int
(:(:40
int:int:40
id:debt:40
type-> int
):):40
arraySize*-> #
fParamsTail*-> #
fParams-> type id arraySize* fParamsTail
{:{:41
funcHead-> type id(fParams)
int:int:42
id:value:42
type-> int
;:;:42
arraySize*-> #
int:int:43
varDecl-> type id arraySize*;
id:price:43
type-> int
;:;:43
arraySize*-> #
id:value:44
varDecl-> type id arraySize*;
=:=:44
integer:100:44
+:+:44
factor-> number
term*-> #
term-> factor term*
integer:2:44
*:*:44
factor-> number
(:(:44
integer:5:44
+:+:44
factor-> number
term*-> #
term-> factor term*
integer:3:44
):):44
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr*-> +term arithExpr*
arithExpr-> term arithExpr*
;:;:44
factor-> (arithExpr)
term*-> #
term*-> *factor term*
term-> factor term*
arithExpr*-> #
arithExpr*-> +term arithExpr*
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
for:for:45
statement-> assignStat;
(:(:45
int:int:45
id:price:45
type-> int
=:=:45
integer:0:45
;:;:45
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
id:price:45
<:<:45
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
integer:3:45
relOp-> == | <= | >= | < | > | <>
;:;:45
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
relExpr-> arithExpr relOp arithExpr
id:price:45
=:=:45
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
id:price:45
+:+:45
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
integer:2:45
):):45
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr*-> +term arithExpr*
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
{:{:46
if:if:47
(:(:47
id:price:47
>:>:47
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
integer:0:47
relOp-> == | <= | >= | < | > | <>
):):47
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
then:then:47
{:{:47
id:price:48
=:=:48
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
integer:10:48
;:;:48
factor-> number
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
assignStat-> variable=expr
}:}:49
statement-> assignStat;
statement*-> #
statement*-> statement statement*
else:else:49
statBlock-> {statement*}
{:{:49
}:}:49
statement*-> #
;:;:49
statBlock-> {statement*}
}:}:50
statement-> if(expr)then statBlock else statBlock;
statement*-> #
statement*-> statement statement*
;:;:50
statBlock-> {statement*}
return:return:51
statement-> for(type id=expr;relExpr;assignStat)statBlock;
(:(:51
id:value:51
):):51
indice*-> #
idnest-> idnest* id indice*
idnest*-> #
idnest*-> idnest idnest*
variable-> idnest* id indice*
factor-> variable
term*-> #
term-> factor term*
arithExpr*-> #
arithExpr-> term arithExpr*
expr-> arithExpr
;:;:51
}:}:52
statement-> return(expr);
statement*-> #
statement*-> statement statement*
statement*-> statement statement*
statement*-> statement statement*
;:;:52
funcBody-> {varDecl* statement*}
$
funcDef-> funcHead funcBody
funcDef*-> #
funcDef*-> funcDef funcDef*
progBody-> program{varDecl*statement*};funcDef*
E-> classDecl* progBody
$
